# Policy
cmake_minimum_required( VERSION 3.7) 


# Project name
project(openTRJ CXX C)

include(${CMAKE_SOURCE_DIR}/cmake/macros.cmake)

if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()

if (NOT NO_PARALLEL)
   find_package(MPI)
   if (NOT MPI_CXX_FOUND)
      message(STATUS "========== OpenTRAJ Parallel Information ==========")
      message(STATUS )
      message(STATUS "No MPI compiler found. Perhaps you want to set one explicitly?")
      message(STATUS "To override the default compiler, set the environment variable")
      message(STATUS "     export CXX=/full/path/to/mpic++")
      message(STATUS "in bash or ksh or sh.  In csh or tcsh, use:")
      message(STATUS "     setenv CXX /full/path/to/mpic++")
      message(STATUS "before running the cmake command.")
      message(STATUS )
      message(STATUS "=================================================")
   endif()
   IF ( MPI_CXX_FOUND )
      INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})
      if(DEFINED $ENV{CXX})
        message(STATUS "Found MPI compiler, but using the CXX compiler set in the CXX environment variable, $ENV{CXX}")
      else()
        set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
        set(ENV{CXX} ${MPI_CXX_COMPILER})
      endif()
   ENDIF()
   include(FindOpenMP)
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "-std=c++11 -O3 ${OpenMP_CXX_FLAGS}")        ## Optimize	
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   set(CMAKE_CXX_FLAGS "-std=c++11 -O3 -ffast-math -fno-math-errno ${OpenMP_CXX_FLAGS}")  
endif()
if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_C_FLAGS " -O2 ")        ## Optimize	
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   set(CMAKE_C_FLAGS "-O2 -fmessage-length=0") 
endif()

LONG_TODAY(BUILD_DATE)
include_directories("include")
include_directories("data")
include_directories("${PROJECT_SOURCE_DIR}/xdr/include")
include_directories("${PROJECT_SOURCE_DIR}/voro++/include")
include_directories("${PROJECT_SOURCE_DIR}/alglib/include")

add_subdirectory(alglib)
add_subdirectory(xdr)
add_subdirectory(voro++)
add_subdirectory(libtraj)
add_subdirectory(Molecules)
add_subdirectory(Voronoi)
add_subdirectory(Properties)
add_subdirectory(Execute)

include_directories("${PROJECT_SOURCE_DIR}/Properties" "${PROJECT_SOURCE_DIR}/Execute" "${PROJECT_SOURCE_DIR}/Voronoi" "${PROJECT_SOURCE_DIR}/Molecules" "${PROJECT_SOURCE_DIR}/libtraj")
add_executable(trjVoronoi trjVoronoi.cpp)
add_executable(trjProp trjProp.cpp)
target_link_libraries(trjVoronoi Voronoi Execute traj mols xdrfile voro++ alglib)
target_link_libraries(trjProp Voronoi Properties Execute traj mols xdrfile voro++ alglib)
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set (CMAKE_INSTALL_PREFIX "$ENV{HOME}" CACHE PATH "default install path" FORCE )
endif()
install(TARGETS trjVoronoi trjProp RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin" COMPONENT executable)
message( STATUS)
message( STATUS "========== OpenTRAJ Build Information ==========")
message( STATUS "Current date/time .......... = ${BUILD_DATE}")
message( STATUS "CMAKE_SYSTEM ............... = ${CMAKE_SYSTEM}")
message( STATUS "================================================")
message( STATUS "CMAKE_BUILD_TYPE ........... = ${CMAKE_BUILD_TYPE}")
message( STATUS "CMAKE_INSTALL_PREFIX ....... = ${CMAKE_INSTALL_PREFIX}")
message( STATUS "CMAKE_C_COMPILER ........... = ${CMAKE_C_COMPILER}")
message( STATUS "CMAKE_CXX_COMPILER ......... = ${CMAKE_CXX_COMPILER}")
